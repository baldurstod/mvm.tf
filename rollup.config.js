import fs from 'fs';
import nodeResolve from '@rollup/plugin-node-resolve';
import copy from 'rollup-plugin-copy';
import terser from '@rollup/plugin-terser';
import styles from 'rollup-plugin-styles';
import json from '@rollup/plugin-json';
import image from '@rollup/plugin-image';
import replace from '@rollup/plugin-replace';

const isProduction = process.env.BUILD === 'production';

writeIcons();

export default (async () => ({
	input: './src/client/js/application.js',
	output: {
		file: './build/client/js/application.js',
		format: 'esm'
	},
	plugins: [
		replace({
			preventAssignment: true,
			__isProduction__: isProduction,
		}),
		styles({
			url: false,
			mode: [
				'inject',
				(varname) => `import { styleInject } from 'harmony-ui';styleInject(${varname});`
			],
		}),
		json({
			compact: true,
		}),
		image(),
		nodeResolve({
		}),
		isProduction ? terser() : null,
		copy({
			targets: [
				{src: 'src/client/index.html', dest: 'build/client/'},
			]
		}),
	],
}))();

function writeIcons() {
	let iconsPath = './src/client/json/lists/classicons.json';
	let input = fs.readFileSync(iconsPath);
	const classIcons = JSON.parse(input);

	let fileContent = '// This file was generated by rollup\n';
	// First write the imports
	for (const classIcon of classIcons) {
		fileContent += `import ${classIcon} from '../../../img/classicons/leaderboard_class_${classIcon}.png';\n`;
	}

	fileContent += '\nexport const CLASS_ICONS = {\n';
	for (const classIcon of classIcons) {
		fileContent += `	${classIcon}: ${classIcon},\n`;
	}
	fileContent += '}\n';

	fs.writeFile(`./src/client/js/view/elements/classicons.js`, Buffer.from(fileContent), async (err) => {if (err) throw err});
}
